# Docker Compose override for development mode
# Usage: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
services:
  sticker-catalogue:
    build:
      context: ./sticker-catalogue
      dockerfile: src/main/docker/Dockerfile.dev
    volumes:
      # Mount source code for live reload
      - ./sticker-catalogue:/work:cached
      # Mount Maven cache to speed up builds
      - maven-cache:/root/.m2
    environment:
      # DataDog APM configuration
      - DD_SERVICE=sticker-catalogue
      - DD_ENV=development
      - DD_VERSION=${COMMIT_SHA:-dev}
      - DD_AGENT_HOST=host.docker.internal
      # Use development profile
      - QUARKUS_PROFILE=dev
      # Override any production settings
      - QUARKUS_HTTP_HOST=0.0.0.0
      # Disable all dev services - use external containers instead
      - QUARKUS_DEVSERVICES_ENABLED=false
      - QUARKUS_DATASOURCE_DEVSERVICES_ENABLED=false
      - QUARKUS_KAFKA_DEVSERVICES_ENABLED=false
      - QUARKUS_S3_DEVSERVICES_ENABLED=false
      # Database configuration
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://sticker-catalogue-db:5432/sticker_catalogue
      - QUARKUS_DATASOURCE_USERNAME=sticker_user
      - QUARKUS_DATASOURCE_PASSWORD=sticker_password
      - QUARKUS_DATASOURCE_DB_KIND=postgresql
      # Kafka configuration
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - MP_MESSAGING_CONNECTOR_SMALLRYE_KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS=redpanda:9092
      # S3/MinIO configuration
      - QUARKUS_S3_ENDPOINT_OVERRIDE=http://minio:9000
      - QUARKUS_S3_AWS_REGION=us-east-1
      - QUARKUS_S3_AWS_CREDENTIALS_TYPE=static
      - QUARKUS_S3_AWS_CREDENTIALS_STATIC_PROVIDER_ACCESS_KEY_ID=minioadmin
      - QUARKUS_S3_AWS_CREDENTIALS_STATIC_PROVIDER_SECRET_ACCESS_KEY=minioadmin
      - QUARKUS_S3_PATH_STYLE_ACCESS=true
      - STICKER_IMAGES_BUCKET=sticker-images
      # Enable live reload and debugging
      - QUARKUS_LIVE_RELOAD_INSTRUMENTATION=true
      - QUARKUS_DEBUG_ENABLED=true
      - QUARKUS_DEBUG_HOST=0.0.0.0
      - QUARKUS_DEBUG_PORT=5005
    ports:
      # Expose debug port for remote debugging
      - "5005:5005"
    command: ["./mvnw", "quarkus:dev", "-Dquarkus.http.host=0.0.0.0", "-Dquarkus.devservices.enabled=false"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sticker-catalogue.rule=PathPrefix(`/api/stickers`)"
      - "traefik.http.services.sticker-catalogue.loadbalancer.server.port=8080"

  sticker-award:
    # Development configuration: use hot-reload Dockerfile and bind-mount source
    build:
      context: ./sticker-award
      dockerfile: Dockerfile.dev
    environment:
      # DataDog APM configuration
      - DD_SERVICE=sticker-award
      - DD_ENV=development
      - DD_VERSION=${COMMIT_SHA:-dev}
      - DD_AGENT_HOST=host.docker.internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./sticker-award:/app:cached  # Live code reload
      - go-mod-cache:/go/pkg/mod     # Persist Go module cache
    command: ["air", "-c", ".air.toml"]

  # user-management doesn't run in hot reload mode yet! 
  # commented out so we fall back to the non-reloading service in docker-compose.yml
  # user-management:
  #   build:
  #     context: ./user-management
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     # Mount source code for live reload
  #     - ./user-management:/app:cached
  #     # Mount NuGet cache to speed up builds
  #     - nuget-cache:/root/.nuget/packages
  #   environment:
  #     # DataDog APM configuration
  #     - DD_SERVICE=user-management
  #     - DD_ENV=development
  #     - DD_VERSION=${COMMIT_SHA:-dev}
  #     - DD_AGENT_HOST=host.docker.internal
  #     # Configure driven adapters
  #     - DRIVEN=AGNOSTIC
  #     # Development environment
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - ASPNETCORE_URLS=http://+:8080
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"

  web-backend:
    environment:
      # DataDog APM configuration
      - DD_SERVICE=web-backend
      - DD_ENV=development
      - DD_VERSION=${COMMIT_SHA:-dev}
      - DD_AGENT_HOST=host.docker.internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
      
   web-frontend:
     # platform: linux/amd64  # Force x86-64 to avoid ARM64 rollup issues
     build:
       context: ./web-frontend
       dockerfile: Dockerfile.dev
     volumes:
       # Mount source code for live reload
       - ./web-frontend:/app:cached
       # Mount node modules over the top, so that modules from the host don't get used
       # this is necessary for platform-specific modules.
       - web-frontend-node-modules-cache:/app/node_modules:cached
       # Mount npm cache to speed up builds
       - npm-cache:/root/.npm
     environment:
       # Vite configuration for development
       - VITE_API_BASE_URL=http://localhost:8080
       - NODE_ENV=
     labels:
       - "traefik.enable=true"
       - "traefik.http.routers.web-frontend.rule=PathPrefix(`/`)"
       - "traefik.http.routers.web-frontend.priority=1"
       - "traefik.http.services.web-frontend.loadbalancer.server.port=8080"

  web-frontend:
    environment:
      # Datadog RUM configuration (runtime injection via vite-envs)
      - DD_RUM_APPLICATION_ID=${DD_RUM_APPLICATION_ID}
      - DD_RUM_CLIENT_TOKEN=${DD_RUM_CLIENT_TOKEN}
      - DD_SITE=${DD_SITE:-datadoghq.eu}
      - DD_ENV=development
      - DD_VERSION=${COMMIT_SHA:-dev}
      - DD_SERVICE=web-frontend

volumes:
  maven-cache:
  go-mod-cache:
  nuget-cache:
  npm-cache:
  web-frontend-node-modules-cache:
