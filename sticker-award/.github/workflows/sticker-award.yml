name: Sticker Award Service

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
    paths:
      - "sticker-award/**"
      - ".github/**"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_AWARD_SERVICE: ${{ github.repository_owner }}/stickerlandia/sticker-award-service
  REPOSITORY_URL: github.com/${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: Set up Go
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version: '1.21'
          cache-dependency-path: sticker-award/go.sum
      
      - name: Install dependencies
        run: |
          cd sticker-award
          go mod download
          go mod tidy
      
      - name: Run Go fmt check
        run: |
          cd sticker-award
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go fmt check failed. Run 'gofmt -s -w .' to fix formatting issues."
            gofmt -s -l .
            exit 1
          fi
      
      - name: Run Go vet
        run: |
          cd sticker-award
          go vet ./...
      
      - name: Build application
        run: |
          cd sticker-award
          go build -v -o bin/sticker-award ./cmd/server
      
      - name: Run Unit Tests
        run: |
          cd sticker-award
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./sticker-award/coverage.out
          flags: unittests
          name: codecov-sticker-award
        continue-on-error: true
      
      - name: Run gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@2139dbb38764cdc7d0b11d98f55b10f5b7f05dd5 # v2.0.3
        with:
          args: '-fmt sarif -out results.sarif ./sticker-award/...'
        continue-on-error: true
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@ea9e4e37992a54ee68a9622e985e60c8e8f12d9f # v3.27.4
        with:
          sarif_file: results.sarif
        continue-on-error: true

  push-image:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: Get Commit Info
        id: get_sha
        run: |
          echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_AWARD_SERVICE }}
          tags: |
            latest
            ${{ env.COMMIT_SHA }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./sticker-award
          file: ./sticker-award/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GIT_COMMIT_SHA=${{ env.COMMIT_SHA }}
            GIT_REPOSITORY_URL=${{ env.REPOSITORY_URL }}
            DD_GIT_REPOSITORY_URL=${{ env.REPOSITORY_URL }}
            DD_GIT_COMMIT_SHA=${{ env.COMMIT_SHA }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@2c4eb7b3a74d56c9e1a0ac4b3b5b34b99e7c3b08 # v1.5.1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_AWARD_SERVICE}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true